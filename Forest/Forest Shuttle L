/**
 *  Forest Shuttle L Z-Wave
 *
 *  Copyright 2019 Sy
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 */
 
metadata {
	definition (name: "Forest Shuttle L Z-Wave", namespace: "sy", author: "Sy") {
    	capability "Window Shade" 
        capability "Switch Level" 
		capability "Refresh"
        capability "Health Check"
        capability "Actuator"
        capability "Sensor"

		command "stop"

		fingerprint mfr: "0207", prod: "0027", model: "0100", deviceJoinName: "Forest Shuttle L Z-Wave"
	}

	 tiles (scale: 2) {
     	multiAttributeTile(name:"windowShade", type: "generic", width: 3, height: 4){
            tileAttribute ("device.windowShade", key: "PRIMARY_CONTROL") {
                attributeState "closed", label: 'Closed', action: "open", icon:"st.shades.shade-closed", backgroundColor: "#ffffff", nextState:"opening"
                attributeState "open", label: 'Open', action: "close", icon:"st.shades.shade-open", backgroundColor: "#00a0dc", nextState:"closing"
                attributeState "opening", label: 'Opening', action: "stop", icon:"st.shades.shade-opening", backgroundColor: "#99d9f1", nextState:"partially open"
                attributeState "closing", label: 'Closing', action: "stop", icon:"st.shades.shade-closing", backgroundColor: "#99d9f1", nextState:"partially open"
                attributeState "partially open", label: 'Partially Open', action: "open", icon:"st.shades.shade-open", backgroundColor: "#00a0dc", nextState:"opening"
            }
            tileAttribute ("device.level", key: "SLIDER_CONTROL") {
                attributeState "level", action:"setLevel"
            }
        }
    }
}

def open() {
    zwave.basicV1.basicSet(value: 99).format()
}

def close() {
    zwave.basicV1.basicSet(value: 0).format()
}

def stop() {
    zwave.switchMultilevelV3.switchMultilevelStopLevelChange().format()
}

def setLevel(value, duration = null) {
    Integer level = value as Integer
    if (level < 0) level = 0
    if (level > 99) level = 99
    delayBetween([
            zwave.basicV1.basicSet(value: level).format(),
            zwave.switchMultilevelV1.switchMultilevelGet().format()
    ])
}

def refresh() {
    delayBetween([
            zwave.switchMultilevelV1.switchMultilevelGet().format(),
            zwave.batteryV1.batteryGet().format()
    ], 1500)
}

def zwaveEvent(physicalgraph.zwave.commands.basicv1.BasicReport cmd) {
    handleLevelReport(cmd)
}

def zwaveEvent(physicalgraph.zwave.commands.switchmultilevelv3.SwitchMultilevelStopLevelChange cmd) {
    [ createEvent(name: "windowShade", value: "partially open", displayed: false, descriptionText: "$device.displayName shade stopped"),
      response(zwave.switchMultilevelV1.switchMultilevelGet().format()) ]
}

def zwaveEvent(physicalgraph.zwave.commands.switchmultilevelv3.SwitchMultilevelReport cmd) {
    handleLevelReport(cmd)
}

def zwaveEvent(physicalgraph.zwave.commands.basicv1.BasicSet cmd) {
    handleLevelReport(cmd)
}

private handleLevelReport(physicalgraph.zwave.Command cmd) {
    def descriptionText = null
    def shadeValue = null

    def level = cmd.value as Integer
    if (level >= 99) {
        level = 100
        shadeValue = "open"
    } else if (level <= 0) {
        level = 0
        shadeValue = "closed"
    } else {
        shadeValue = "partially open"
        descriptionText = "${device.displayName} shade is ${level}% open"
    }
    def levelEvent = createEvent(name: "level", value: level, unit: "%", displayed: false)
    def stateEvent = createEvent(name: "windowShade", value: shadeValue, descriptionText: descriptionText, isStateChange: levelEvent.isStateChange)
    
    def result = [stateEvent, levelEvent]
    result
}

def parse(String description) {
    def result = null
    def cmd = zwave.parse(description, [0x20: 1, 0x26: 3]) 
    if (cmd) {
        result = zwaveEvent(cmd)
    }
    return result
}
